/*
 * generated by Xtext 2.10.0
 */
package fr.minesnantes.browserautomation.generator

import fr.minesnantes.browserautomation.seleniumDSL.Assert
import fr.minesnantes.browserautomation.seleniumDSL.CallProcedure
import fr.minesnantes.browserautomation.seleniumDSL.Click
import fr.minesnantes.browserautomation.seleniumDSL.Fill
import fr.minesnantes.browserautomation.seleniumDSL.Instruction
import fr.minesnantes.browserautomation.seleniumDSL.Navigate
import fr.minesnantes.browserautomation.seleniumDSL.Read
import fr.minesnantes.browserautomation.seleniumDSL.Select
import fr.minesnantes.browserautomation.seleniumDSL.SeleniumTest
import fr.minesnantes.browserautomation.seleniumDSL.Tick
import java.io.File
import java.util.ArrayList
import java.util.HashMap
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

class Counter {
    private int count;

    def Counter() {
        count = 0;
    }

    def int nextCount() {
        return count++;
    }
}

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SeleniumDSLGenerator extends AbstractGenerator {
    
    private HashMap<String, List<String>> proceduresContext;
    
    private Counter elementCounter;
    
    def initializeContext() {
        this.elementCounter = new Counter();
        this.proceduresContext = new HashMap<String, List<String>>();
    }
    
    def destroyContext() {
        this.elementCounter = null;
        this.proceduresContext = null;
    }

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        initializeContext
        
        fsa.generateFile(
            'browserautomation' + File.separator + 'SeleniumTest.java',
            resource.contents.filter(SeleniumTest).head.generateSeleniumTest
        )
        
        destroyContext
    }

    def generateSeleniumTest(SeleniumTest st) '''
        package browserautomation;
        
        import org.openqa.selenium.By;
        import org.openqa.selenium.WebDriver;
        import org.openqa.selenium.WebElement;
        import org.openqa.selenium.chrome.ChromeDriver;
        import org.openqa.selenium.support.ui.Select;
        
        public class SeleniumTest {
            
            private static WebDriver webDriver;
            
            «st.procedures.map[p | '''
               «val params = p.parameters.map([par | '''String «par»''']).join(", ")»
               private static void «p.name» («params») {
                   «this.proceduresContext.put(p.name, p.parameters)»
                   «p.instructions.map[i | generateInstruction(i, p.name)].join»
               }
            '''].join»
            
            public static void main(String[] args) {
                // Initialize Selenium web driver for Google Chrome
                System.setProperty("webdriver.chrome.driver", "lib/chromedriver");
                webDriver = new ChromeDriver();
                
                «this.proceduresContext.put("main", new ArrayList<String>())»
                «st.main.instructions.map[i | generateInstruction(i, "main")].join»
                
                // Close the browser
                webDriver.quit();
            }
        }
    '''
    
    // Dispatch methods to handle defined instructions    
    def dispatch generateInstruction(Navigate n, String methodName) '''
        webDriver.get("«n.url»");
    '''
    
    def dispatch generateInstruction(Click c, String methodName) '''
        «val eltName = '''element«elementCounter.nextCount»'''»
        «val clickValue = c.value»
        «switch c.type {
            case 'input': '''WebElement «eltName» = webDriver.findElement(By.xpath("//input[@value=\"«clickValue»\"]"));'''
            case 'link': '''WebElement «eltName» = webDriver.findElement(By.linkText("«clickValue»"));'''
            case 'xpath': '''WebElement «eltName» = webDriver.findElement(By.xpath("«clickValue»"));'''
            case 'name' : '''WebElement «eltName» = webDriver.findElement(By.name("«clickValue»"));'''
            default: '''// FIXME unrecognized click instruction: click «c.type» «clickValue»''' 
        }»
        «eltName».click();
    '''
    
    def dispatch generateInstruction(Fill f, String methodName) '''
        «val eltName = '''element«elementCounter.nextCount»'''»
        WebElement «eltName» = webDriver.findElement(By.name("«f.name»"));
        «eltName».sendKeys(«IF this.proceduresContext.get(methodName).contains(f.value)»«f.value»«ELSE»"«f.value»"«ENDIF»);
    '''
    
    def dispatch generateInstruction(Tick t, String methodName) '''
        «val eltName = '''element«elementCounter.nextCount»'''»
        WebElement «eltName» = webDriver.findElement(By.name("«t.name»"));
        «eltName».click();
    '''
    
    def dispatch generateInstruction(Select s, String methodName) '''
        «val eltName = '''element«elementCounter.nextCount»'''»
        Select «eltName» = new Select(webDriver.findElement(By.name("«s.name»")));
        «eltName».selectByVisibleText("«s.value»");
    '''
    
    def dispatch generateInstruction(Read r, String methodName) {
        this.proceduresContext.get(methodName).add(r.variable)
        '''
            «val eltName = '''element«elementCounter.nextCount»'''»
            WebElement «eltName» = webDriver.findElement(By.name("«r.name»"));
            String «r.variable» = «eltName».getAttribute("value");
        '''
    }
    
    def dispatch generateInstruction(Assert a, String methodName) '''
        «val eltName = '''element«elementCounter.nextCount»'''»
        «val assertValue = a.value»
        WebElement «eltName» = webDriver.findElement(By.name("«a.name»"));
        «switch a.type {
                case 'contains': '''
                if(!«eltName».getAttribute("value").contains(«IF this.proceduresContext.get(methodName).contains(assertValue)»«assertValue»«ELSE»"«assertValue»"«ENDIF»)) {
                    throw new AssertionError(«eltName».getAttribute("value") + " does not contain «assertValue»");
                };'''
                case 'equals': '''
                if(!«eltName».getAttribute("value").equals(«IF this.proceduresContext.get(methodName).contains(assertValue)»«assertValue»«ELSE»"«assertValue»"«ENDIF»)) {
                    throw new AssertionError(«eltName».getAttribute("value") + " is not equal to «assertValue»");
                };'''
                case 'exists': '''
                if(!«eltName».isDisplayed()) {
                    throw new AssertionError(«eltName».getAttribute("value") + " does not exist");
                };'''
                default: '''// FIXME unrecognized assert instruction: assert «a.type» «assertValue»''' 
            }»
    '''
    
    def dispatch generateInstruction(CallProcedure cp, String method) '''
        «cp.procedureName»(«cp.parameters.map([param | '''"«param»"''']).join(", ")»);
    ''' 

    def dispatch generateInstruction(Instruction i, String methodName) '''
        // FIXME wtf is this instruction?
    '''

}
